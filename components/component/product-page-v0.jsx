"use client";

/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/XPqGZszkG9T
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Arimo } from 'next/font/google'
import { Cormorant_Garamond } from 'next/font/google'

arimo({
  subsets: ['latin'],
  display: 'swap',
})

cormorant_garamond({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
import { Label } from "@/components/ui/label";
import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Separator } from "@/components/ui/separator";
import { AvatarImage, AvatarFallback, Avatar } from "@/components/ui/avatar";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "../ui/card";
import Link from "next/link";
import { redirect, useRouter } from "next/navigation";
import { previousDay } from "date-fns";
import {
  collection,
  doc,
  getDoc,
  getDocs,
  orderBy,
  query,
  where,
} from "firebase/firestore";
import { db } from "@/firebase/config";
import { useEffect, useState } from "react";
import AddToCartButton from "../AddToCartButton";
import AddOnDialog from "./AddOnDialog";
import { Router } from "next/router";

export function ProductPageV0({ productId, product, isAddedToCart }) {
  const [relatedData, setRelatedData] = useState([]);
  const [selectedImage, setSelectedImage] = useState(product?.images[0]);
  const [productQuantity, setProductQuantity] = useState(1);
  const [selectedColor, setSelectedColor] = useState(product?.colors[0]);
  const [selectedSize, setSelectedSize] = useState(product?.sizes[0]);
  const [addonDetails, setAddonDetails] = useState(null);
  const router = useRouter();

  function handlePreviewClick(imageUrl) {
    setSelectedImage(imageUrl);
  }

  function handleCardDirect(id) {
    redirect("/product/" + id);
  }

  useEffect(() => {
    async function getAllProductDetails() {
      const docRef = query(
        collection(db, "products"),
        where("hide", "==", false),
        where("category", "==", product.category),
        orderBy("timestamp", "desc")
      );
      const docSnap = await getDocs(docRef);

      let data = [];
      docSnap.forEach((doc) => {
        if (doc.id !== productId) data.push({ ...doc.data(), id: doc.id });
      });
      console.log(data);
      return data;
    }

    async function helper() {
      const data = await getAllProductDetails();
      setRelatedData(data);
      console.log("related data", data);
    }
    async function getAddonDetail(addon) {
      const coll = collection(db, "products");
      const addonRef = query(coll, where("excelId", "==", addon));
      const addonSnap = await getDocs(addonRef);
      let addonData = [];
      addonSnap.forEach((doc) => {
        addonData.push({ ...doc.data(), id: doc.id });
      });
      return addonData;
    }

    async function getAllAddonDetails(addons) {
      if (!addons) return [];
      let addonData = [];
      for (let i = 0; i < addons.length; i++) {
        const data = await getAddonDetail(addons[i]);
        addonData.push(data);
      }
      return addonData;
    }

    async function fetchAllAddonDetails() {
      const resp = await getAllAddonDetails(product?.addons);
      setAddonDetails(resp);
    }

    fetchAllAddonDetails();
    helper();
  }, []);

  const overPrice = product?.mrp
    ? product.mrp
    : +(+product?.price + +(product?.price * product?.discount) / 100);

  if (!product) {
    router.push("/category/all");
  }

  return (
    <>
      <div
        key="1"
        className="grid md:grid-cols-2 gap-6 lg:gap-12 items-start max-w-6xl px-4 mx-auto py-6"
      >
        <div className="grid gap-4 md:gap-10 items-start">
          <div className="grid gap-4">
            <img
              alt="Product Image"
              className="aspect-square object-cover border border-gray-200 w-full rounded-lg overflow-hidden dark:border-gray-800"
              height={600}
              src={selectedImage}
              width={600}
            />
            <div className="flex flex-wrap gap-4">
              {product?.images.map((image, index) => (
                <button
                  key={index}
                  className="border hover:border-gray-900 rounded-lg overflow-hidden transition-colors dark:hover:border-gray-50"
                  onClick={() => handlePreviewClick(image)}
                >
                  <img
                    alt="Preview thumbnail"
                    className="aspect-square object-cover"
                    height={100}
                    src={image}
                    width={100}
                  />
                  <span className="sr-only">View Image {index}</span>
                </button>
              ))}
            </div>
          </div>
        </div>
        <div className="grid gap-4 md:gap-10 items-start">
          <div className="grid gap-4">
            <h1 className="font-bold text-3xl capitalize">{product?.name} </h1>
            <div>
              <p className="capitalize">{product?.description}</p>
            </div>
            <div className="text-4xl font-bold">
              Rs {product?.price} /-{" "}
              {product?.discount != 0 && (
                <>
                  <span className="line-through text-sm">
                    Rs {overPrice} /-{" "}
                  </span>
                  <span className="text-green-500 text-lg">
                    ({" " + Math.trunc(product?.discount)}% off)
                  </span>{" "}
                </>
              )}
            </div>
            <div className="grid gap-2">
              <Label className="text-base" htmlFor="quantity">
                Quantity{" "}
                <span className="text-sm text-muted-foreground">
                  (Maximum Quantity: {+product?.maxQuantity})
                </span>
              </Label>
              <Input
                defaultValue={1}
                id="quantity"
                min={1}
                max={+product?.maxQuantity + 1 - 1}
                type="number"
                value={productQuantity}
                onChange={(e) => {
                  if (e.target.value > +product?.maxQuantity) {
                    setProductQuantity(product?.maxQuantity);
                  } else if (e.target.value < 0) {
                    setProductQuantity(1);
                  } else {
                    setProductQuantity(e.target.value);
                  }
                }}
              />
            </div>
            <div className="grid gap-2">
              <Label className="text-base" htmlFor="color">
                Color
              </Label>
              <select
                id="color"
                value={selectedColor}
                onChange={(e) => setSelectedColor(e.target.value)}
                className="border rounded-md p-2"
              >
                <option value="" disabled>
                  Select a color
                </option>
                {product?.colors &&
                  product?.colors.map((color, index) => (
                    <option key={index} value={color} className=" capitalize">
                      {color}
                    </option>
                  ))}
              </select>
            </div>
            <div className="grid gap-2">
              <Label className="text-base" htmlFor="size">
                Size
              </Label>
              <select
                id="size"
                value={selectedSize}
                onChange={(e) => setSelectedSize(e.target.value)}
                className="border rounded-md p-2"
              >
                <option value="" disabled>
                  Select a size
                </option>
                {product?.sizes &&
                  product?.sizes.map((size, index) => (
                    <option key={index} value={size} className=" capitalize">
                      {size}
                    </option>
                  ))}
              </select>
            </div>
            {product?.inventory > 0 ? (
              <AddToCartButton
                productName={product?.name}
                price={product?.price}
                quantity={productQuantity}
                color={selectedColor}
                size={selectedSize}
                imageUrl={product?.images[0]}
                productId={productId}
                maxQuantity={product?.maxQuantity}
                inventory={product?.inventory}
                showAddOnDialog={true}
                addons={addonDetails}
                discount={product?.discount}
              />
            ) : (
              <Button size="lg" disabled>
                Out of Stock
              </Button>
            )}
          </div>
          {product?.sections.map((section, index) => {
            return (
              <div key={index} className="grid gap-4 text-sm leading-loose">
                <h2 className="font-bold text-lg">{section?.title}</h2>
                <p>{section?.description}</p>
              </div>
            );
          })}
        </div>
      </div>
      <div className="w-full container gap-4">
        <Separator />
        <h2 className="font-bold text-lg mt-4 ">Related Products</h2>
        <div className="w-full gap-6 py-4 grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 xl:grid-cols-5">
          {relatedData.slice(0, 5).map((relatedProduct) => (
            <Card
              key={relatedProduct.id}
              className="max-w-[350px] md:max-w-[250px] grid-cols-1 mx-auto"
            >
              <CardHeader>
                <CardTitle className="capitalize">
                  <Link href={"/product/" + relatedProduct.id}>
                    {relatedProduct.name}
                  </Link>
                </CardTitle>
                <CardDescription className="line-clamp-2 capitalize">
                  {relatedProduct.description}
                </CardDescription>
              </CardHeader>
              <CardContent className="w-full -mt-2">
                <Link href={"/product/" + relatedProduct.id}>
                  <img
                    src={relatedProduct.images[0]}
                    alt="Product Image"
                    className="w-full rounded"
                  />
                </Link>
                <div className="flex w-full mt-4">
                  <Button size="sm" className="w-full">
                    <Link href={"/product/" + relatedProduct.id}>
                      View Product
                    </Link>
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      </div>
    </>
  );
}

function StarIcon(props) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <polygon points="12 2 15.09 8.26 22 9.27 17 14.14 18.18 21.02 12 17.77 5.82 21.02 7 14.14 2 9.27 8.91 8.26 12 2" />
    </svg>
  );
}
